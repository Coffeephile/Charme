// Generated by CoffeeScript 1.6.3
/*
	Name:
	charme_schema

	Info:
	Global Context Definitions
*/


(function() {
  this.charme_schema_categories = [
    {
      id: 'el',
      name: 'Electronics and Hardware',
      sub: [
        {
          id: 'el_smartphone',
          name: 'Smartphones and Mobile Phones'
        }, {
          id: 'el_smartphone',
          name: 'PC Components',
          sub: [
            {
              id: 'el_pc_cpu',
              name: 'CPU'
            }, {
              id: 'el_pc_ram',
              name: 'RAM'
            }, {
              id: 'el_pc_mainbaord',
              name: 'Mainboard'
            }, {
              id: 'el_pc_hdd',
              name: 'Harddisk'
            }
          ]
        }
      ]
    }, {
      id: 'cl',
      name: 'Clothing',
      sub: [
        {
          id: 'cl_shoes',
          name: 'Shoes'
        }, {
          id: 'cl_hats',
          name: 'Hats'
        }
      ]
    }, {
      id: 'fo',
      name: 'Food and drinks',
      sub: [
        {
          id: 'fo_drink',
          name: 'Drinks',
          sub: [
            {
              id: 'fo_drink_lemonade',
              name: 'Lemonade'
            }, {
              id: 'fo_drink_milk',
              name: 'Milk'
            }, {
              id: 'fo_drink_beer',
              name: 'Beer'
            }, {
              id: 'fo_drink_water',
              name: 'Water'
            }
          ]
        }, {
          id: 'fo_meal',
          name: 'Meal'
        }
      ]
    }
  ];

  this.charme_schema = {
    global: {
      'offer': {
        attributes: [
          {
            id: "price",
            type: "moneyamount",
            name: "Price:"
          }, {
            id: "currency",
            type: "currency",
            name: "Currency:"
          }, {
            id: "sell",
            type: "productcategory",
            name: "Product Identifier:"
          }
        ]
      },
      'review': {
        attributes: [
          {
            id: "title",
            type: "string",
            name: "Title:"
          }, {
            id: "target",
            type: "entity",
            name: "Entity:"
          }, {
            id: "rating",
            type: "rating",
            name: "Rating:"
          }
        ]
      },
      'publicevent': {
        attributes: [
          {
            id: "Title",
            type: "string",
            name: "Title:"
          }, {
            id: "location",
            type: "location",
            name: "Location:"
          }, {
            id: "startTime",
            type: "datetime",
            name: "Start Time:"
          }, {
            id: "endTime",
            type: "datetime",
            name: "End Time:"
          }, {
            id: "audience",
            type: "int",
            name: "Guests:"
          }
        ]
      },
      'move': {
        attributes: [
          {
            id: "startLocation",
            type: "area",
            name: "Start:"
          }, {
            id: "endLocation",
            type: "location",
            name: "Destination:"
          }, {
            id: "startTime",
            type: "datetime",
            name: "Start Time:"
          }, {
            id: "endTime",
            type: "datetime",
            name: "End Time:"
          }, {
            id: "seats",
            type: "int",
            name: "Seats"
          }
        ]
      }
    }
  };

  CharmeModels.ListOperations = (function() {
    function ListOperations() {}

    ListOperations.makeUniqueList = function(list) {
      var uniqueNames;
      uniqueNames = [];
      $.each(list, function(i, el) {
        if ($.inArray(el, uniqueNames) === -1) {
          return uniqueNames.push(el);
        }
      });
      return uniqueNames;
    };

    return ListOperations;

  })();

  CharmeModels.Signature = (function() {
    Signature.hash;

    Signature.revision;

    /*
    
    	Name:
    	Signature(originalMessage)
    
    	Info:
    	Generate a signature with the users private key.
    	
    	Params:
    	message:string:The message you want to sign
    
    	Location:
    	crypto.js
    
    	Code:JS:
    	var signature = crypto_sign("hallo welt", );
    */


    function Signature(originalMessage) {
      var key1, rsa;
      this.originalMessage = originalMessage;
      rsa = new RSAKey();
      key1 = getKeyByRevision(0);
      this.revision = key1.revision;
      rsa.setPrivateEx(key1.rsa.rsa.n, key1.rsa.rsa.e, key1.rsa.rsa.d, key1.rsa.rsa.p, key1.rsa.rsa.q, key1.rsa.rsa.dmp1, key1.rsa.rsa.dmq1, key1.rsa.rsa.coeff);
      this.hash = rsa.signStringWithSHA1(originalMessage);
    }

    /*
    	
    	Name:
    	Signature.Verify(hash, message2verify, publicKey)
    
    	Info:
    	Verify a signature. Returns TRUE or FALSE
    
    	Params:
    	signature:string:The signature to check
    	message:string:The message you want to check
    	publicKey:object:The publicKey (usually from key directory)
    
    	Location:
    	crypto.js
    
    	Code:JS:
    	// TODO
    */


    Signature.Verify = function(hash2Check, message2verify, publicKey) {
      var key1, result, x509;
      key1 = getKeyByRevision(0);
      alert("SIGNATURE VERIFICATION NOT WORKING YET!!!");
      x509 = new X509();
      x509.readCertNE(key1.rsa.rsa.n, key1.rsa.rsa.e);
      result = x509.subjectPublicKeyRSA.verifyString(message, signature);
      if (result === true) {
        return true;
      } else {
        return false;
      }
    };

    Signature.keyToPem = function(n, e) {
      var i, linecount, pem, pemnew, rsa;
      rsa = new RSAKey();
      rsa.setPublic(n, e);
      pem = rsa.publicKeyToX509PemString();
      linecount = Math.ceil(pem.length / 64);
      pemnew = "-----BEGIN PUBLIC KEY-----\n";
      i = 0;
      while (i < linecount) {
        pemnew += pem.substr(i * 64, 64) + "\n";
        i++;
      }
      return pemnew += "-----END PUBLIC KEY-----";
    };

    Signature.prototype.toJSON = function() {
      return {
        keyRevision: this.revision,
        hashvalue: this.hash
      };
    };

    Signature.showDialog = function() {
      return $.get("templates/box_checksign.html", function(d) {
        var template;
        _.templateSettings.variable = "rc";
        template = _.template(d, null);
        return ui_showBox(template, function() {});
      });
    };

    /*
    
    		Return Form: {object, signature {keyRevision, hashvalue}}
    */


    Signature.makeSignedJSON = function(object) {
      var jsonString, signature;
      jsonString = JSON.stringify(object);
      console.log("string is");
      console.log(jsonString);
      signature = new CharmeModels.Signature(jsonString);
      return {
        object: object,
        signature: signature.toJSON()
      };
    };

    Signature.verifySignedJSON = function(object, key) {
      var str;
      str = JSON.stringify(object);
      return CharmeModels.Signature.Verify(object.signature.hashvalue, str, key);
    };

    return Signature;

  })();

  CharmeModels.Keys = (function() {
    function Keys() {}

    Keys.buildHash = function(key) {
      return CryptoJS.SHA256(CryptoJS.SHA256(key.n) + CryptoJS.SHA256(key.e));
    };

    Keys.querySignatureDirectory = function(user) {};

    Keys.makeRsaFkKeypair = function(publicKey) {
      var fastkey, randomKey, rk, rsa, rsaEncKey;
      randomKey = randomAesKey(32);
      fastkey = getFastKey(0, 1);
      rk = aes_encrypt(fastkey.fastkey1, randomKey);
      rsa = new RSAKey();
      rsa.setPublic(publicKey.n, publicKey.e);
      rsaEncKey = rsa.encrypt(randomKey);
      return {
        rsaEncKey: rsaEncKey,
        "revision": fastkey.revision,
        "randomKey": rk,
        "randomKeyRaw": randomKey
      };
    };

    return Keys;

  })();

  this.isResponsive = function() {
    return $(".header.responsive").is(":visible");
  };

  CharmeModels.Context = (function() {
    function Context() {}

    Context.getTimeHours = function() {
      var k, str, _i, _len, _ref;
      str = "";
      _ref = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        str += "<option>" + k + "</option>";
      }
      return str;
    };

    Context.getTimeMinutes = function() {
      var k, str, _i, _len, _ref;
      str = "";
      _ref = [0, 15, 30, 45];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        str += "<option>" + k + "</option>";
      }
      return str;
    };

    Context.getRad = function() {
      var k, str, _i, _len, _ref;
      str = "";
      _ref = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        str += "<option>" + k + "km</option>";
      }
      return str;
    };

    Context.getCurrencies = function() {
      var k, str, _i, _len, _ref;
      str = "";
      _ref = ["EUR", "USD", "BTC", "YEN"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        str += "<option vale='" + k + "'>" + k + "</option>";
      }
      return str;
    };

    Context.getRating = function() {
      var k, str, _i, _len, _ref;
      str = "";
      _ref = ["5", "4", "3", "2", "1"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        str += "<option>" + k + "</option>";
      }
      return str;
    };

    Context.searchRecursiveId = function(node, parentId, level) {
      var retval, subnode, _i, _len;
      if (level == null) {
        level = 0;
      }
      console.log("LOOKUP LEVEL" + level);
      for (_i = 0, _len = node.length; _i < _len; _i++) {
        subnode = node[_i];
        console.log("iterate el" + subnode.name);
        if (subnode.id === parentId) {
          console.log("RETURN");
          console.log(subnode);
          return subnode.sub;
        } else if (subnode.sub != null) {
          console.log("	RECURSIVE CALL");
          retval = this.searchRecursiveId(subnode.sub, parentId, level + 1);
          if (retval != null) {
            return retval;
          }
        }
      }
    };

    Context.searchRecursiveText = function(node, query) {
      var retArray, subnode, subres, _i, _len;
      retArray = [];
      for (_i = 0, _len = node.length; _i < _len; _i++) {
        subnode = node[_i];
        if (subnode.name.toLowerCase().indexOf(query.toLowerCase()) >= 0) {
          console.log("PSUH" + subnode.name);
          retArray.push(subnode);
        }
        if (subnode.sub != null) {
          subres = this.searchRecursiveText(subnode.sub, query);
          retArray = retArray.concat(subres);
        }
      }
      return retArray;
    };

    Context.renderCateogries = function(parentId, searchQuery) {
      var item, parent, str, _i, _len;
      str = "";
      if (searchQuery !== "" && (searchQuery != null)) {
        parent = CharmeModels.Context.searchRecursiveText(charme_schema_categories, searchQuery);
      } else {
        if (parentId == null) {
          parent = charme_schema_categories;
        } else {
          parent = CharmeModels.Context.searchRecursiveId(charme_schema_categories, parentId);
        }
      }
      console.log(parent);
      for (_i = 0, _len = parent.length; _i < _len; _i++) {
        item = parent[_i];
        if (str !== "") {
          str += ", ";
        }
        if (item.sub != null) {
          str += "<a class='selectCategory' data-cat='" + item.id + "'>" + item.name + "</a>";
        } else {
          str += "<a class='selectCategory' data-final='" + item.id + "'>" + item.name + "</a>";
        }
      }
      return str;
    };

    Context.getForm = function(fieldId) {
      var html, k, v, _ref;
      html = "";
      console.log(charme_schema.global["move"]);
      _ref = charme_schema.global[fieldId].attributes;
      for (k in _ref) {
        v = _ref[k];
        html += "<div style='padding:8px 0px; font-weight:bold;'>" + v["name"] + "</div>";
        if (v["type"] === "area") {
          html += "<select  name='" + v["id"] + "' class='locationContainer'></select> <a class='but_addLocation'>Add Location</a> Radius: <select name='" + v["id"] + "_radius'>" + CharmeModels.Context.getRad() + "</select>";
        } else if (v["type"] === "location") {
          html += "<select name='" + v["id"] + "' class='locationContainer'></select> <a class='but_addLocation'>Add Location</a>";
        } else if (v["type"] === "string") {
          html += "<input  name='" + v["id"] + "' type='text' class='box'>";
        } else if (v["type"] === "entity") {
          html += "<input  name='" + v["id"] + "' type='text' class='box'>";
        } else if (v["type"] === "rating") {
          html += '<select name="' + v["id"] + '">' + CharmeModels.Context.getRating() + '</select> (5 is best)';
        } else if (v["type"] === "datetime") {
          html += '<input  name="' + v["id"] + '" class="box" type="date"> <select name="' + v["id"] + '_hour">' + CharmeModels.Context.getTimeHours() + '</select>:<select  name="' + v["id"] + '_minute">' + CharmeModels.Context.getTimeMinutes() + '</select>';
        } else if (v["type"] === "int") {
          html += "<input name='" + v["id"] + "' type='text' class='box'>";
        } else if (v["type"] === "moneyamount") {
          html += "<input name='" + v["id"] + "' type='text' class='box'>";
        } else if (v["type"] === "currency") {
          html += '<select name="' + v["id"] + '">' + CharmeModels.Context.getCurrencies() + '</select>';
        } else if (v["type"] === "productcategory") {
          html += '<input placeholder="Search..." id="productidentifierSearch" class="box" type="text" style="margin-bottom:8px;"><input style="clear:both" type="hidden" name="' + v["id"] + '" id="productSelector"><div  id="productidentifierHelp">' + CharmeModels.Context.renderCateogries() + '</div>';
        }
        html += "<br>";
      }
      return html;
    };

    return Context;

  })();

}).call(this);
